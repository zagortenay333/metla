fn print (str: Slice(U8)) {
    import "%stdlib/linux";
    linux.write(1, str.data, str.count);
}

fn println (str: Slice(U8)) {
    print(str);
}

fn: #ir1 main {
    println("Hello World!\n");
}

// This tests the poly value feature "n$":
fn test28 {
    {
        fn a (n$: U64) {
            var x: [n]I32;
            var y: [2]I32 = x;
        }

        a(2);
    }

    {
        struct Foo (n$: U64) { x: [n]I32; }
        var x: Foo(2);
    }

    {
        struct Foo (n$) { x: [n]I32; }
        var x: Foo(2);
    }

    {
        struct Foo (n$ = 2) { x: [n]I32; }
        var x: Foo();
        var y: Foo();
        var z: Foo(42);
    }

    {
        struct Foo (n$: $T) { x: [n]T; }
        var x: Foo(2);
        x.x = [1, 42];
    }

    {
        fn f (x$) { if:ct x > 0 do f(x - 1); }
        f(2);
    }

    {
        fn f (x$: $T, y: T) {}
        f((-1, 2), (1, 2));
    }

    {
        fn a (x$: Fn (I32) -> I32) do x(2);
        fn b (x: $T) -> T do return x;
        a(b);
    }

    {
        fn a (x$: Fn (I32) -> I32) {}
        a(fn (x) => -42);
    }

    {
        fn a (n$, y: Type(n)) {}
        a(-1, 2);
    }

    {
        struct Foo (n$) { x: [n]I32; }
        fn a (a$: I32, b$: I32, y: Fn (Foo(a), Foo(b))) {}
        a(42, 42, fn (x: $T, y: T) {});
        a(41, 41, fn (x: $T, y: T) {});
        a(41, 41, fn (x: $T, y: T) {});
    }

    {
        struct Foo ($T, n$) { x: [n]T; }
        fn f (x: $T, y: Foo(T, 2)) {}
        f(42, Foo(U64, 2){});
        f(42, Foo(U64, 2){});
    }

    {
        struct Foo (n$) { x: [n]I32; }
        fn f (x$: U64, y: Foo(x)) {}
        f(1, Foo(1){});
        f(1, Foo(1){});
        f(2, Foo(2){});
    }
}

// This tests the tvar_dot feature.
fn test27 {
    {
        struct Foo ($T, n$) { x: [n]T; }
        var x: Foo(Bool, 2);
        var y: [x.n]x.T = [false, true];
    }

    {
        struct Foo ($R, n$) { x: [n]R; }
        var x: Foo(I32, 2);

        fn f (x: $T, y: x.R) {}
        f(x, 42);
    }

    {
        struct Foo ($R) { x: R; }
        fn a (x: Fn (x: Foo(I32), I32)) {}
        fn b (x: $T, y: x.R) {}
        a(b);
    }

    {
        struct Foo { field: I32; }
        fn a (x: $T, y: Type(x.field)) {}
        a(Foo{}, 42);
    }

    {
        enum Baz { baz }
        struct Foo { a: Baz; b: U64; }

        fn a (
            x: ~$T,
            y: Fn (Type(x~.a), $K),
            z: Fn (Type(y)) -> $R,
            w: R
        ) {
            z(y);
        }

        fn b (x: $T, y: Type(x.baz)) { }
        fn c (proc: Fn (Baz, $C)) -> C { return nil; }

        var foo: Foo;
        a(~foo, b, c, Baz.baz);
    }
}

// Test the "nil" feature:
fn test26 {
    {
        fn a ($T) -> T do return nil;

        a(I32);
        a(Bool);
        a([2]I32);
        a((I32, Bool));

        struct Foo { x: I32; }
        a(Foo);

        enum Bar { x = 4 }
        a(Bar);
    }

    {
        fn a (x: $T, y: T) {}
        a(nil, 42);
    }
}

// Test fat arrow functions:
fn test25 {
    {
        fn a (x: Fn (I32) -> I32) {}
        a(fn (x) => 42);
    }

    {
        fn a (x: Fn -> I32) {}
        a(fn => 42);
    }
}

// This function tests the situation where a polymorphic
// type variable is bound to a type that contains other
// polymorphic type vars or to another kind of type var.
fn test24 {
    { // Binding to a tvar_call:
        fn a (x: Fn (x: $T, y: I32), y: Fn (x: $R, y: Bool)) {
            x({}, 2);
            x([1, 2], 2);
            y({}, true);
            y([false, true], true);
        }

        fn b (x: Slice($T), y: T) {}
        a(b, b);
    }

    { // Binding to a tvar_fn:
        fn a (x: $T, y: Type(x)) { x(42); y(42); }
        fn b (x: $T)  {}
        fn c (x: I32) {}
        a(b, c);
    }

    { // Binding to a tvar_tuple_lit and tvar_array_lit:
        fn a (x: $T, y: $R) {}
        a([[1,],], (1, 2));

        fn b (x: $T, y: T) {}
        b([1, 2], [-1, 2]);

        fn c (x: $T, y: T) {}
        c((1, 2), (1, 2));
    }

    { // Binding to a tvar_ptr:
        fn a (x: $T, y: $R) {}
        a(~[1, 2], ~(1, 2));

        fn b (x: $T, y: T) {}
        b(~[1, 2], ~[-1, 2]);

        fn c (x: $T, y: T) {}
        c(~(1, 2), ~(1, 2));
    }

    { // Binding to a type that contains poly types:
        fn a (x: Fn ($T, T)) {}
        fn b (x: [2]$R, y: [2]I32) {}
        a(b);
    }

    { // Binding tvar_untyped_lit nil:
        fn b (x: $T, y: T) {}
        b(nil, 42);
    }

    { // Binding tvar_untyped_lit struct:
        struct Foo { x: I32; }
        fn a (x: $T, y: T) {}
        a({}, Foo{});
    }

    { // Binding tvar_untyped_lit enum:
        enum Foo { x }
        fn a (x: $T, y: T) {}
        a(.x, Foo.x);
        a(Foo.x, .x);
    }
}

fn test23 {
    fn a (x: Bool) { .self()(false); };
    fn b { .self()(); };
}

fn test21 {
    var x: ~I32;
    x + 1;
    x - 1;
    x += 1;
    x -= 1;
}

var test20_foo: String = "var foo = false;";
var test20_baz = "var baz = false;";
var test20_globs = [test20_foo, test20_baz];

fn test20 {
    embed "var bar = 42;";
    do var x = bar;

    embed test20_foo;
    do var y = foo || false;

    embed test20_globs[1];
    do var y = baz || false;

    do var x = 1 + embed "42";

    {
        embed: refs=baz "embed: refs=baz \"var baz = 42; do baz;\"; do baz;";
        do baz;
    }

    embed: refs=baz "embed \"{ var baz = 42; do baz; }\"; do baz;";

    embed "\*\| {
              |     macro f { (`baz); }
              |     embed: refs=baz "var baz = 42; baz;";
              |     f:();
              | }
              |\*";

    embed "\*\| {
              |     macro f { embed "(`baz);"; }
              |     embed: refs=baz "var baz = 42; baz;";
              |     f:();
              | }
              |\*";

    {
        struct Context { x: U64; }
        var ctx = Context{ x = 42 };

        macro iter (ctx: ~Context, name: $, body: $) {
            var it  = 42;
            var foo = false;
            embed: refs=(foo, `name=it) body;
        }

        iter: (~ctx, bar) {
            var x: U64  = bar;
            var y: Bool = foo;
        }
    }

    {
        macro iter (body: $) {
            while true { :outer
                while true { :inner
                    embed:(
                        add_return_backticks,
                        breaks    = (hit=outer, miss=outer..),
                        continues = (hit=inner, miss=outer..)
                    ) body;
                }
            }
        }

        fn baz -> I32 {
            iter: {
                return 32;
            }
        }

        var foo = 42;

        iter: { :outer
            iter: {
                iter: {
                    foo = 32;
                    break outer;
                }
            }
        }
    }

    {
        struct Foo { embed "foo: Bool;"; }
        var x: Foo;
        var y: Bool = x.foo;
    }
}

var test19_baz = "var baz = false;";
fn test19 {
    {
        var x = false;
        macro foo { var y: Bool = `x; }
        foo:();
    }

    fn f () -> Bool {
        macro b -> I32 {
            if true do `return false;
            else    do  return 42;
        }

        b:();
    }

    {
        macro b (ref: $, b_code: $) {
            embed: refs=(`ref) b_code;
            var y: Bool = baz;
        }

        macro a (a_code: $) {
            b:(a_code, embed `a_code;);
        }

        a:(var baz = false;);
    }

    {
        macro b (code: $) {
            embed code;
            var y: Bool = baz;
        }

        macro a (code: $) {
            b:(`code);
        }

        a:(var baz = false;);
    }
}

fn test18 {
    {
        import "%stdlib/core.metla";
        var x: core.String = "asdf";
    }

    {
        import "%stdlib/core";
        var x: core.String = "asdf";
    }

    {
        import "%stdlib/core" { a = * }
        import "%stdlib/core" { b = * }
        var x: a.String = "asdf";
        var y: b.String = "asdf";
    }
}

fn test17 {
    fn foo (x = .caller()) {}
    foo();
}

fn test16 {
    {
        type:alias Baz = [32]I32;
        var x: Baz;
        x[0] = 32;
    }

    {
        type Foo = U64;
        var x: Foo = 42;
        var y: Foo = x;
        var z = x + y;
    }

    {
        type Bar = Slice(U64);
        var x: Bar = [1, 2];
    }

    {
        type:alias Bar = Any;
        var x: Bar = [1, 2];
    }
}

fn test15 {
    do var x: Slice(U64) = [1, 2, 3];
    do var x: Slice(I32) = I32[1, 2, 3];
    do var x: Slice(Any) = [1, 2, 3];
    do var x: Slice(Any) = (1, false);
    do var x: Any = (1, false);
    do var x: Any = [1, 2];
    do var x: Any = 1;

    {
        var x: [2]I32;
        var y: Slice(I32) = x;
    }

    struct Foo { x: Bool; }
    struct Bar { x: Bool; }

    fn foo (x: Slice($T)) {}
    foo([1, 2]);

    fn bar ($T, y: Slice(T)) {}
    bar(U64, [1, 2]);
}

// This contains a bunch of polymorphic code.
fn test14 {
    {
        fn a (x: $T, y: Slice(Type(x)), z: Slice(Type(y))) {}
        a(-42, [2, 3], [[3, 4], [47, 77]]);
    }

    {
        struct Foo ($T) { x: T; }
        struct Bar ($T) { y: T; }

        fn foo ($T, x: (Foo(T), Bar(T))) {}

        foo(Bool, ({}, {}));
        foo(Bool, ({}, {}));
        foo(U64, ({}, { y = 42 }));

        fn bar ($T, x: [2]Foo(T)) {}
        bar(Bool, Foo(Bool)[{}, {}]);
    }

    {
        struct Foo ($T) { x: T; }
        struct Bar ($T) { y: T; }

        fn foo (x: Foo(Bar($T))) {}
        foo(Foo(Bar(I32)){});

        fn bar ($T, x: Foo(Bar(T))) {}
        bar(I32, { x = { y = 32 } });
        bar(I32, { x = {} });
        bar(I32, {});
    }

    {
        struct Foo ($T) { x: T; }
        fn baz ($T, y: Fn (Foo(T))) {}
        baz(Bool, fn (x: Foo($T)) {});
    }

    {
        fn f (x: Slice(Slice($T))) {}
        f([[1, 2], [1, 2]]);
    }

    {
        fn f (x: [2]Slice($T)) {}
        f([[1, 2], [1, 2]]);
    }

    {
        fn f (x: Slice(Slice(U64))) {}
        f([[1, 2], [1, 2]]);
    }

    {
        (fn (x:$T){} (3));

        fn bar (x: $T) {};
        fn foo (x: Fn (I32) = bar) {};

        fn baz (x: Fn (I32) = fn (x: $T) {}) {};
    }

    {
        struct Foo ($T) { x: T; }
        fn a (x: Foo($T), y: T) {}
        a({}, 42);
    }

    {
        struct Foo { x: Bool; }
        fn bar (x: Foo = {}) {};
        bar();
    }

    {
        fn foo (x: $T) {}
        fn bar (x: $T) { foo(x); }
        bar(32);
        bar(false);
    }

    {
        fn foo ($T) { var y: T = 42; }
        foo(I32);

        fn bar (x: $T) { var y: T = 42; }
        bar(42);
    }

    {
        struct Foo ($T) { x: T; }
        var x: Foo(Bool);
        var y: Bool = x.x;
    }

    {
        fn foo (w: Fn ($T) -> T) {}
        fn bar (x: Bool) -> Bool do return false;
        fn baz (x: I32) -> I32 { return -42; }
        foo(bar);
        foo(baz);
    }

    {
        fn foo (x: $T) -> T { var y: T; return y; }
        fn bar (x: $T, y: Type(foo(1))) {}
    }

    {
        struct Foo ($T, $R) { x: T; }
        fn foo (x: Foo($T, $R)) {}
        foo(Foo(I32, Bool){});
    }

    {
        fn foo (x: Bool, y = g6.x) {}
        fn bar (x: Bool = false, y: U64) {}

        foo(true, 42);
        foo(true);
        foo(x = false, y = 4);
        foo(y = 4, x = false);
        foo(x = false);

        bar(true, 42);
        bar(x = false, y = 4);
        bar(y = 4, x = false);
        bar(y = 32);
        bar(y = 32, x = false);
    }

    {
        fn foo (x: $T, y = 42) {}
        foo(42);

        fn bar ($T = Bool) { var x: T = false; }
        bar();
    }

    {
        struct Foo ($T = I32) { x: Bool; }
        var x: Foo();
    }

    {
        struct Foo ($T, $R = Bool) { x: T; }
        fn foo (x: Foo($T)) {}
        foo(Foo(I32, Bool){});
    }

    {
        struct Foo ($T, $R = Bool) { x: T; }
        fn foo (x: Foo($T, R = I32)) {}
        foo(Foo(I32, I32){});
    }

    {
        fn foo (x: $T) -> T { return x; }
        var x: Fn (Bool) -> Bool;
        x = foo;
        x(false);

        var y: Fn (Bool) -> Bool = fn (x: $T) -> T { return x; };
        y(false);

        fn bar (x: Fn (Bool) -> Bool) {}
        bar(fn (x: $T) -> T { return x; });
        bar(foo);

        fn baz (x: Fn (Bool)) {}
        baz(fn (x: $T) {});
    }

    {
        fn bar (x: $T) -> T { return x; }
        fn foo (x: Fn (Bool) -> Bool, y: Fn (I32) -> I32) {}
        foo(bar, bar);
        foo(y = bar, x = bar);
    }

    {
        fn foo (x: Fn ($R), y: R) {}
        foo(fn (x: $T) {}, 42);

        fn bar (x: Fn -> $R, y: R) {}
        bar(fn -> I32 { return 42; }, 42);
    }

    {
        fn foo (x: Fn($T)->I32) {}
        fn bar (x: $T) -> T { return x; }
        foo(bar);
    }

    {
        fn foo (x: $H) {
            fn bar (x: Fn ($T), y: Fn($R)) {}
            bar(fn (x: I32) {}, fn (x: I32) {});
        }

        foo(42);
    }
}

.assert((3 + 2) == 5);
fn test13 {
    .assert((3 + 2) == 5);
}

fn test12 {
    var foo = 1;

    {
        if:ct g3[1] == 3 { var foo = 2; }
        var x = foo;
    }

    enum E {
        a = 3,
        b = 255,
        if:ct a != b { c }
    }

    struct Foo {
        x: I32;
        y: I32;
        if:ct true { z: Bool; }
    }
}

fn test11 {
    do enum E { a, b, c, }
    do enum:indistinct E { a = 1, b = 1, c = .raw(a) }
    do enum:explicit E { a = 0, b = 4 }
    do enum:(indistinct, explicit) E { a = 3, b = 2, c = 6 - 3, d = 0 }
    do enum:U8 E { a = 254 + g1 }

    enum Foo { a, b }
    var x: Foo;
    var y: U64;
    y = .raw(Foo.a) + y;

    do var x: .raw(Foo) = 3;
    do var x: Foo = .cast(3);
    do var x: ~Foo = ~.cast(3);
    do var x: ~Foo = ~.bitcast(3);

    x = .a;
    .a == Foo.b;
    .a == x;

    do var x: ~Foo = ~.a;

    do enum          A { a, b = 4 }
    do enum:implicit C { a, b }
    do enum:explicit B { a = 1, b = 4 }
    do enum:(explicit, flags) D { a = 0b10, b = 0b01,  masks: d = 42 }

    enum:(flags, U8) Bar {
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,

        masks:

        foo = 42,
        bar = 43,
    }

    {
        var x = Bar.a1|.a2|.a3|.a6;
        var y = !Bar.a1;
        var z = (Bar.a1|.a2) & .a8;
        var w = (Bar.a1|.a2) ^ .a8;

        x |= .a7;
        x &= .a7;
    }
}

fn test9 {
    struct Foo {
        x: Bool;
        y: I64;
    }

    struct Bar {
        x: Foo;
        y: ~Foo;
        z: ~~Bar;
        w: I64;
    }

    var x: ~Foo = ~{ x = false, y = 42 };
    var y: Bar = {
        x = { x = false, y = 42 },
        y = ~{ x = false, y = 42 },
        z = ~~{ x = { y=3 }, z = ~~{ w = 3 } },
        w = 3,
    };

    fn foo (x: Foo, y: ~Foo, z: ~Bar) {}
    foo({}, ~{}, ~{});
    foo({ x = false }, ~{}, ~{});

    {
        struct Bar {
            a: Bool;
            b: I32;
        }

        struct Foo {
            x: U64;
            y: Bar;
            z: ~Slice(I64);
            w: ~(I32, I32);
        }

        var x = Foo{
            x = 42,
            y = {a = true, b = -1},
            z = ~[69, 420],
            w = ~(1, 2),
        };
    }
}

fn test8 {
    struct Foo {
        x: Bool;
        y: I64;
    }

    fn foo (x: ~Foo, y: Foo) {}

    var x: Foo;
    var y = Foo{ x = false, y = 42 };

    foo(~x, y);

    union Bar {
        x: Bool;
        y: I64;
    }

    do var x: Bar = Bar{};
    do var x: Bar = Bar{ x = false };
}

fn test7 {
    struct Foo { x: Bool; }
    var foo: Foo;
    foo.x;

    var x: (U64, I64) = (32, 42);
    var y: (I64,) = (42,);
    var z: (a: U64, b: I64) = (a=32, b=42);
    var w: I64 = z.b;

    do var x: (a: (I64, I32), b: (I16, I8)) = (a=(1, 2), b=(3, 4));

    fn foo1 -> (U64, Bool)       { return (32, false); }
    fn foo2 -> (a: U64, b: Bool) { return (a=32, b=false); }

    {
        var x: (U64, Bool) = foo1();
        x[0] = 32;
    }

    {
        var x: (a:U64, b:Bool) = foo2();
        x[0] = 32;
        x.a = 32;
    }
}

fn test6 {
    var x: U64;

    do var y = .cast(x, I32);
    do var y = .bitcast(~x, U64);
    do var y: U64 = .cast(32);
    do var y: U64 = .bitcast(~x);

    fn foo (x: I64, y: ~Void) {}
    foo(.cast(32), .bitcast(32));
}

fn test5 {
    struct Foo {
        x: Bool;
        union { y: Bool; }
        struct { z: Bool; }
    }
}

fn test4 {
    var x: Bool;
    var y: ~Bool = ~x;
    y~ = false;
}

// @todo Floating point numbers are not supported
// by the x64 backend at the moment.
//
// fn test3 {
//     {
//         var x: F32 = 3.14;
//         var y: F64 = 3.14;
//         y = x;
//         var z = (.nan(), .inf(), -.inf());
//     }
// 
//     {
//         var x = 42.0;
//         var y: F64 = 42.0;
//         var z = -0.0;
//     }
// 
//     if:ct (42.0 + 32.1) > 1.0 {}
// }

if:ct g2 == 3 {
    var g0 = 32 + 1;
} else {
    var g0 = 42 + 1;
}

enum Bar { a = 42, b, c }
struct Foo { x: U64; y: U64; }
var g1: U8 = 1;
var g2  = 3;
var g3  = (3, 3);
var g4  = (a=3, b=3);
var g5  = 3 - -2;
var g6  = Foo{ x = 42 };
var g9  = g2 + 1;
var g10 = main;
var g11 = 42.0 + 32.1;
var g12 = (~g1)~;
var g13 = !false;
var g14 = ['a', 'b'];
var g15: [4]U64;
var g16 = [1, 2][0] + g15[0];
var g17: (U64, Bool);
var g18 = g17[0] + (false, 42, 0.1)[1];
var g19 = Foo{ x = 3 }.x + Foo{}.y;
var g20 = g6.x + g6.y;
var g21: Foo;
var g22 = g21.x;
var g23: (a: U64, b: U64);
var g24 = g23.a + (w=3, g=2).w;
var g25 = .cast(g2, I64) + .bitcast(g5, I64);
var g26 = ~[32, 42];
var g27 = g26~[0] + 3;
var g28 = (eval 3 + 2) + 1;
var g29 = (.nan(),)[0];
var g30 = (.inf(),)[0];
var g31 = (-.inf(),)[0];
var g32 = (3.14,)[0];
var g33 = (.cast(3.14, F32),)[0];
var g34 = .cast(255, U8);
var g35 = .cast(1, U8);
var g36 = g1 + g34;
var g37 = .raw(Bar.c) + 1;
var g38: String = "asdf";
var g39: Slice(U64) = ['a', 'b'];
var g40 = embed "42";
var g41: ~[2]I32;
var g42 = g41~[1];
var g43: Type(g41) = g41;
var g44 = g43~[0];
var g45: [2]I32 = nil;
var g46 = g45[0];

macro iter (body: $) {
    while true { :outer
        while true { :inner
            embed:(
                add_return_backticks,
                breaks    = (hit=outer, miss=outer..),
                continues = (hit=inner, miss=outer..)
            ) body;
        }
    }
}
